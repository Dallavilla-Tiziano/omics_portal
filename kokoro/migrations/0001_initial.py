# Generated by Django 5.1.6 on 2025-05-16 16:01

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Cardiomiopathies',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=100, unique=True)),
            ],
            options={
                'verbose_name': 'Cardiomiopathy',
                'verbose_name_plural': 'Cardiomiopathies',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Comorbidities',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=100, unique=True)),
            ],
            options={
                'verbose_name': 'Comorbidity',
                'verbose_name_plural': 'Comorbidities',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='DeviceImplant',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date', models.DateField()),
                ('lv4_ring', models.FloatField(blank=True, null=True)),
                ('lv3_ring', models.FloatField(blank=True, null=True)),
                ('lv2_ring', models.FloatField(blank=True, null=True)),
                ('lv1_tip', models.FloatField(blank=True, null=True)),
                ('v1', models.FloatField(blank=True, null=True)),
                ('ms1', models.PositiveIntegerField(blank=True, null=True)),
                ('lv_pulse_configuration_2_lv2', models.FloatField(blank=True, null=True)),
                ('pacing_impendance1', models.FloatField(blank=True, null=True)),
                ('v2', models.FloatField(blank=True, null=True)),
                ('ms2', models.PositiveIntegerField(blank=True, null=True)),
                ('pacing_impendance2', models.FloatField(blank=True, null=True)),
                ('v3', models.FloatField(blank=True, null=True)),
                ('ms3', models.PositiveIntegerField(blank=True, null=True)),
                ('pacing_impendance3', models.FloatField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DeviceType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type', models.CharField(blank=True, choices=[('CD', 'Cardiac Device'), ('LR', 'Loop Recorder'), ('PM', 'Pace Maker')], default='', max_length=2)),
                ('company', models.CharField(blank=True, choices=[('AB', 'Abbott'), ('BT', 'Biotronik'), ('MT', 'Medtronic'), ('BS', 'Boston'), ('SJ', 'St. Jude')], default='', max_length=2)),
                ('model', models.CharField(blank=True, choices=[('INTICA 7 HF-TQPDF4/IS4', 'In7F4Is4'), ('RIVACOR 7 HF-T QP', 'Ri7Hfqp'), ('INTICA 7 HF-TQPDF1/IS4', 'In7Hfis4'), ('INTICA NEO 7 HF-T QP', 'Inn7Hfqp')], default='', max_length=50)),
                ('design', models.CharField(blank=True, choices=[('Single\\Dual Pacemaker', 'Sd Pacemaker'), ('Single\\Dual Chamber ICD', 'Sd Chamber Icd'), ('Other', 'Other')], default='', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Doctors',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'verbose_name': 'Doctor',
                'verbose_name_plural': 'Doctors',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Gene',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'verbose_name': 'Gene',
                'verbose_name_plural': 'Genes',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Mutation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'verbose_name': 'Mutation',
                'verbose_name_plural': 'Mutations',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PatientProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('last_name', models.CharField(max_length=100)),
                ('first_name', models.CharField(max_length=100)),
                ('sex', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], max_length=1)),
                ('date_of_birth', models.DateField()),
                ('nation', models.CharField(blank=True, default='', max_length=100)),
                ('region', models.CharField(blank=True, default='', max_length=100)),
                ('province', models.CharField(blank=True, default='', max_length=100)),
                ('height', models.PositiveIntegerField(blank=True, null=True)),
                ('weight', models.PositiveIntegerField(blank=True, null=True)),
                ('cardioref_id', models.CharField(blank=True, default='', max_length=100)),
            ],
            options={
                'permissions': [('access_sensible_info', 'Can view patient sensible info')],
            },
        ),
        migrations.CreateModel(
            name='Riskfactors',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=100, unique=True)),
            ],
            options={
                'verbose_name': 'Riskfactor',
                'verbose_name_plural': 'Riskfactors',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Study',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('project_code', models.CharField(max_length=100, unique=True)),
                ('project_id', models.CharField(max_length=100)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Study',
                'verbose_name_plural': 'Studies',
            },
        ),
        migrations.CreateModel(
            name='Symptoms',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=100, unique=True)),
            ],
            options={
                'verbose_name': 'Symptom',
                'verbose_name_plural': 'Symptoms',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Therapy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'verbose_name': 'Therapy',
                'verbose_name_plural': 'Therapies',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='DeviceInstance',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('serial_number', models.CharField(help_text='Unique identifier printed on the device', max_length=100, unique=True)),
                ('implantation', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='device', to='kokoro.deviceimplant')),
                ('device_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='device', to='kokoro.devicetype')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='device', to='kokoro.patientprofile')),
            ],
        ),
        migrations.CreateModel(
            name='DeviceEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('date', models.DateField()),
                ('n_icd_shock_appropriate_pre_rf', models.PositiveIntegerField(blank=True, null=True)),
                ('n_icd_shock_inappropriate_pre_rf', models.PositiveIntegerField(blank=True, null=True)),
                ('inappropriate_pre_rf_shock_cause', models.CharField(blank=True, choices=[('TSPV', 'TPSV'), ('FA', 'FA'), ('LEMA', 'Malfunzionamento elettrocatetere vd'), ('FLU', 'Flutter Atriale'), ('MAC', 'Macrodislocazione Elettrocatetere'), ('SIN', 'Tachicardia Sinusale'), ('N', 'Rumore'), ('AB', "Bolla d'aria"), ('DIS', 'Dislocazione elettrodo VD'), ('TD', 'T double counting'), ('TVTF', 'TV>FV'), ('UNK', 'Sconosciuto')], default='', max_length=4)),
                ('n_icd_shock_appropriate_post_brs_diagnosis', models.PositiveIntegerField(blank=True, null=True)),
                ('inappropriate_post_brs_shock_cause', models.CharField(blank=True, choices=[('TSPV', 'TPSV'), ('FA', 'FA'), ('LEMA', 'Malfunzionamento elettrocatetere vd'), ('FLU', 'Flutter Atriale'), ('MAC', 'Macrodislocazione Elettrocatetere'), ('SIN', 'Tachicardia Sinusale'), ('N', 'Rumore'), ('AB', "Bolla d'aria"), ('DIS', 'Dislocazione elettrodo VD'), ('TD', 'T double counting'), ('TVTF', 'TV>FV'), ('UNK', 'Sconosciuto')], default='', max_length=4)),
                ('complications', models.CharField(blank=True, default='', max_length=250)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event', to='kokoro.deviceinstance')),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Late_potentials',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_of_exam', models.DateField()),
                ('max_pressure', models.FloatField(blank=True, null=True)),
                ('min_pressure', models.FloatField(blank=True, null=True)),
                ('basal_lp1', models.FloatField(blank=True, null=True)),
                ('basal_lp2', models.FloatField(blank=True, null=True)),
                ('basal_lp3', models.FloatField(blank=True, null=True)),
                ('basal_lp4', models.FloatField(blank=True, null=True)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kokoro.patientprofile')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Genetic_test',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('Consent_date', models.DateField()),
                ('processingType', models.CharField(choices=[('OSR', 'OSR'), ('IMTC', 'IMTC')], default='', max_length=100)),
                ('testType', models.CharField(choices=[('NGS', 'NGS'), ('Mutuna', 'Mutuna')], default='', max_length=100)),
                ('test_category', models.CharField(choices=[('Oncology', 'Oncology'), ('Channellopathies / Arrhythmias', 'Channellopathies / Arrhythmias'), ('Cardiomiopathies', 'Cardiomiopathies'), ('Neuromuscolar dystrophies', 'Nd'), ('Collagenopathies', 'Collagenopathies'), ('Coagulopathies', 'Coagulopathies'), ('Syndromes / Dysmorphisms', 'Syndromes / Dysmorphisms'), ('Metabolic', 'Metabolic'), ('Screening', 'Screening'), ('Breast K', 'Breast K'), ('Nephropathy', 'Nephropathy'), ('Neuropathy', 'Neuropathy'), ('Hematopathy', 'Hematopathy')], default='', max_length=100)),
                ('chan_subcategory', models.CharField(choices=[('LQTS', 'LQTS'), ('ERS', 'ERS'), ('JWS', 'JWS'), ('Gitelman', 'Gitelman'), ('WPW', 'WPW'), ('BAV', 'BAV'), ('BBB', 'BBB'), ('CPVT', 'CPVT'), ('AF', 'AF'), ('BrS', 'BrS')], default='', max_length=100)),
                ('card_subcategory', models.CharField(choices=[('HMC', 'HMC'), ('ARVD', 'ARVD'), ('NCM', 'NCM'), ('CMIO DILATED', 'CMIO DILATED'), ('Stuctural', 'Structural'), ('Amilo', 'Amilo'), ('Osi', 'Osi'), ('Fabry', 'Fabry'), ('ARVC', 'ARVC'), ('Guch', 'Guch')], default='', max_length=100)),
                ('dys_subcategory', models.CharField(choices=[('Noonan', 'Noonan'), ('Turner', 'Turner'), ('Klinefelter', 'Klinefelter')], default='', max_length=100)),
                ('coll_subcategory', models.CharField(choices=[('Factor II', 'MFactor II'), ('Factor V', 'Factor V'), ('Thrombophilia', 'Thrombophilia'), ('MTHFR', 'MTHFR'), ('Hemophilia', 'Hemophilia'), ('Van Willebrandt', 'Van Willebrandt')], default='', max_length=100)),
                ('neuro_subcategory', models.CharField(choices=[('Steinert', 'Steinert'), ('Ataxia', 'Ataxia'), ('Huntington', 'Huntington'), ('Scapulus humeral', 'Scapulus humeral'), ('Epilepsy', 'Epilepsy'), ('Charcot-Marie Tooth', 'Charcot-Marie Tooth'), ('LGMD', 'LGMD')], default='', max_length=100)),
                ('metabolic_subcategory', models.CharField(choices=[('Diabetes', 'Diabetes'), ('Mody', 'Mody'), ('Dislipidemia', 'Dislipidemia'), ('Metal accumulation', 'Metal accumulation'), ('Alagille', 'Alagille'), ('Gaucher', 'Gaucher'), ('Pompe', 'Pompe')], default='', max_length=100)),
                ('onco_subcategory', models.CharField(choices=[('Breast', 'Breast'), ('Pancreas', 'Pancreas'), ('Ovary', 'Ovary'), ('Colon', 'Metal accumulation'), ('Thyroid', 'Thyroid'), ('NF1', 'NF1'), ('Melanoma', 'Melanoma')], default='', max_length=100)),
                ('NGStest_result', models.CharField(choices=[('Positive', 'Positive'), ('Negative', 'Negative'), ('Not concluded', 'Not concluded')], default='', max_length=100)),
                ('ACMG', models.CharField(choices=[('I', 'I'), ('II', 'II'), ('III', 'III'), ('IV', 'IV'), ('V', 'V')], default='', max_length=100)),
                ('Mutunatest_result', models.CharField(choices=[('Positive', 'Positive'), ('Negative', 'Negative'), ('Not concluded', 'Not concluded')], default='', max_length=100)),
                ('gene_type', models.CharField(choices=[('Clinical', 'Clinical'), ('Incidental', 'Incidental')], default='', max_length=100)),
                ('zygosity', models.CharField(choices=[('HZ', 'HZ'), ('OZ', 'OZ'), ('HA', 'HA')], default='', max_length=100)),
                ('sampleType', models.CharField(choices=[('blood', 'blood'), ('DNA', 'DNA')], default='', max_length=100)),
                ('aliquota', models.PositiveIntegerField(blank=True, null=True)),
                ('corsa_NGS', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='', max_length=3)),
                ('corsa_name', models.CharField(default='', max_length=100)),
                ('sangen', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='', max_length=100)),
                ('Sangen_result', models.CharField(choices=[('Positive', 'Positive'), ('Negative', 'Negative'), ('Not concluded', 'Not concluded')], default='', max_length=100)),
                ('reported', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='', max_length=100)),
                ('report_data', models.DateField()),
                ('eredity', models.CharField(default='', max_length=100)),
                ('cromo_anomality', models.CharField(default='', max_length=100)),
                ('editing_doctor', models.ManyToManyField(blank=True, related_name='Editing_doctor', to='kokoro.doctors')),
                ('genes', models.ManyToManyField(blank=True, help_text='Gene of this test.', related_name='genes', to='kokoro.gene')),
                ('reporting_doctor', models.ManyToManyField(blank=True, related_name='Reporting_doctor', to='kokoro.doctors')),
                ('var_c', models.ManyToManyField(blank=True, help_text='v1c', related_name='v1c', to='kokoro.mutation')),
                ('var_p', models.ManyToManyField(blank=True, help_text='v1p', related_name='v1p', to='kokoro.mutation')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kokoro.patientprofile')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Genetic_status',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('patient_status', models.CharField(choices=[('Proband', 'Proband'), ('Familiar', 'Familiar')], default='', max_length=100)),
                ('proband_familiarity', models.CharField(choices=[('Mother', 'Mother'), ('Father', 'Father'), ('Grand-father', 'Grand-father'), ('Grand-mother', 'Grand-mother')], default='', max_length=100)),
                ('familiarityType', models.CharField(choices=[('SD', 'SD'), ('Cardiopathy', 'Cardiopathy'), ('Other pathologies', 'Other pathologies')], default='', max_length=100)),
                ('cardio_fenotypes', models.CharField(default='', max_length=100, null=True)),
                ('pato_fenotypes', models.CharField(default='', max_length=100, null=True)),
                ('family_members', models.PositiveIntegerField(blank=True, null=True)),
                ('family_degree', models.CharField(choices=[('Mother', 'Mother'), ('Father', 'Father'), ('Grand-father', 'Grand-father'), ('Grand-mother', 'Grand-mother')], default='', max_length=100)),
                ('children', models.PositiveIntegerField(blank=True, null=True)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kokoro.patientprofile')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Genetic_sample',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('blood_sample_date', models.DateField()),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kokoro.patientprofile')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Genetic_profile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('FIN_progressive_genetics', models.PositiveIntegerField(blank=True, null=True)),
                ('FIN_number', models.CharField(max_length=100)),
                ('PIN_number', models.CharField(max_length=100)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kokoro.patientprofile')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Flecainide_test',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_of_provocative_test', models.DateField()),
                ('flecainide_dose', models.FloatField(blank=True, null=True)),
                ('flecainide_result', models.CharField(choices=[('Positive', 'Positive'), ('Negative', 'Negative')], default='', max_length=9)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kokoro.patientprofile')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EP_study',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_of_provocative_test', models.DateField()),
                ('ep_result', models.CharField(choices=[('Positive', 'Positive'), ('Negative', 'Negative')], max_length=9)),
                ('induced_arrhythmia', models.CharField(choices=[('VF', 'VF'), ('NSVF', 'NSVF'), ('VFNS', 'VFNS'), ('VT', 'VT'), ('VTNS', 'VTNS')], default='', max_length=9)),
                ('total_area', models.FloatField(blank=True, null=True)),
                ('bas_area_a_160', models.FloatField(blank=True, null=True)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kokoro.patientprofile')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ECHO',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_of_exam', models.DateField()),
                ('max_pressure', models.FloatField(blank=True, null=True)),
                ('min_pressure', models.FloatField(blank=True, null=True)),
                ('lvef', models.FloatField(blank=True, null=True)),
                ('tapse', models.FloatField(blank=True, null=True)),
                ('left_atrial_area', models.FloatField(blank=True, null=True)),
                ('la_diameter', models.FloatField(blank=True, null=True)),
                ('la_end_diastolic_volume', models.FloatField(blank=True, null=True)),
                ('la_end_systolic_volume', models.FloatField(blank=True, null=True)),
                ('lv_end_diastolic_volume', models.FloatField(blank=True, null=True)),
                ('lv_end_systolic_volume', models.FloatField(blank=True, null=True)),
                ('lv_end_diastolic_diameter', models.FloatField(blank=True, null=True)),
                ('lv_end_systolic_diameter', models.FloatField(blank=True, null=True)),
                ('anatomical_alterations', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='', max_length=3)),
                ('aortic_valvulopathy', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='', max_length=3)),
                ('type_of_aortic_valvulopathy', models.CharField(choices=[('Regurgitation', 'Regurgitation'), ('Stenosis', 'Stenosis'), ('Both', 'Both')], default='', max_length=13)),
                ('severity_of_aortic_valvulopathy', models.CharField(choices=[('Mild', 'Mild'), ('Moderate', 'Moderate'), ('Severe', 'Severe')], default='', max_length=13)),
                ('mitral_valvulopathy', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='', max_length=3)),
                ('type_of_mitral_valvulopathy', models.CharField(choices=[('Regurgitation', 'Regurgitation'), ('Stenosis', 'Stenosis'), ('Both', 'Both')], default='', max_length=13)),
                ('severity_of_mitral_valvulopathy', models.CharField(choices=[('Mild', 'Mild'), ('Moderate', 'Moderate'), ('Severe', 'Severe')], default='', max_length=13)),
                ('tricuspid_valvulopathy', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='', max_length=3)),
                ('type_of_tricuspid_valvulopathy', models.CharField(choices=[('Regurgitation', 'Regurgitation'), ('Stenosis', 'Stenosis'), ('Both', 'Both')], default='', max_length=13)),
                ('severity_of_tricuspid_valvulopathy', models.CharField(choices=[('Mild', 'Mild'), ('Moderate', 'Moderate'), ('Severe', 'Severe')], default='', max_length=13)),
                ('diastolic_function', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='', max_length=3)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kokoro.patientprofile')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ECG',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_of_exam', models.DateField()),
                ('max_pressure', models.FloatField(blank=True, null=True)),
                ('min_pressure', models.FloatField(blank=True, null=True)),
                ('atrial_rhythmh', models.CharField(choices=[('Sinus Rhythm', 'Sinus Rhythm'), ('AF', 'AF'), ('Flutter', 'Flutter')], default='', max_length=100)),
                ('hr', models.FloatField(blank=True, null=True)),
                ('rr', models.FloatField(blank=True, null=True)),
                ('pq', models.FloatField(blank=True, null=True)),
                ('pr', models.FloatField(blank=True, null=True)),
                ('qrs', models.FloatField(blank=True, null=True)),
                ('qt', models.FloatField(blank=True, null=True)),
                ('qtc', models.FloatField(blank=True, null=True)),
                ('max_st', models.FloatField(blank=True, null=True)),
                ('rbbb', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='', max_length=3)),
                ('lrbbb', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='', max_length=3)),
                ('irbbb', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='', max_length=3)),
                ('early_rep', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='', max_length=3)),
                ('fragmented_qrs', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='', max_length=3)),
                ('brs', models.CharField(choices=[('I', 'I'), ('II', 'II'), ('III', 'III')], default='', max_length=4)),
                ('av_block', models.CharField(choices=[('I', 'I'), ('II', 'II'), ('III', 'III')], default='', max_length=14)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kokoro.patientprofile')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='deviceimplant',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kokoro.patientprofile'),
        ),
        migrations.CreateModel(
            name='CoronaryIntervention',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date', models.DateField()),
                ('cabg', models.CharField(blank=True, choices=[('Y', 'Yes'), ('N', 'No')], default='', max_length=1)),
                ('pci', models.CharField(blank=True, choices=[('Y', 'Yes'), ('N', 'No')], default='', max_length=1)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kokoro.patientprofile')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ClinicalEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('date', models.DateField()),
                ('clinical_event', models.CharField(blank=True, choices=[('CAR', 'Cardiac arrest resuscitated'), ('AR', 'Arrhytmia'), ('CT', 'Cardiac transplant'), ('DEATH', 'Death'), ('OT', 'Other'), ('STROKE', 'Stroke')], default='', max_length=100)),
                ('cause', models.CharField(blank=True, default='', max_length=100)),
                ('type', models.CharField(blank=True, default='', max_length=100)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='clinical_event', to='kokoro.patientprofile')),
            ],
        ),
        migrations.CreateModel(
            name='Ajmaline_test',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_of_provocative_test', models.DateField()),
                ('ajmaline_dose', models.FloatField(blank=True, null=True)),
                ('ajmaline_dose_per_kg', models.FloatField(blank=True, null=True)),
                ('ajmaline_result', models.CharField(choices=[('Positive', 'Positive'), ('Negative', 'Negative'), ('Weakly positive', 'Weakly positive')], default='', max_length=16)),
                ('induced_arrhythmia', models.CharField(choices=[('VF', 'VF'), ('NSVF', 'NSVF'), ('VFNS', 'VFNS'), ('VT', 'VT'), ('VTNS', 'VTNS')], default='', max_length=5)),
                ('bas_area_a_160', models.FloatField(blank=True, null=True)),
                ('bas_area_a_180', models.FloatField(blank=True, null=True)),
                ('bas_area_a_200', models.FloatField(blank=True, null=True)),
                ('bas_area_a_250', models.FloatField(blank=True, null=True)),
                ('bas_area_a_280_300', models.FloatField(blank=True, null=True)),
                ('pdm', models.FloatField(blank=True, null=True)),
                ('brs_pattern', models.CharField(choices=[('I', 'I'), ('II', 'II'), ('III', 'III'), ('Suspect', 'Suspect')], default='', max_length=8)),
                ('dose_to_positive_ecg', models.FloatField(blank=True, null=True)),
                ('time_to_positive_ecg', models.DurationField(blank=True, null=True)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kokoro.patientprofile')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Adrenaline_test',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_of_provocative_test', models.DateField()),
                ('adrenaline_dose', models.FloatField(blank=True, null=True)),
                ('adrenaline_result', models.CharField(choices=[('Positive', 'Positive'), ('Negative', 'Negative'), ('Weakly positive', 'Weakly positive')], default='', max_length=16)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kokoro.patientprofile')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Ablation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date', models.DateField()),
                ('total_area', models.FloatField(blank=True, null=True)),
                ('bas_area_a_160', models.FloatField(blank=True, null=True)),
                ('bas_area_a_180', models.FloatField(blank=True, null=True)),
                ('bas_area_a_200', models.FloatField(blank=True, null=True)),
                ('basal_pdm', models.FloatField(blank=True, null=True)),
                ('total_rf_time', models.FloatField(blank=True, null=True)),
                ('rf_w', models.FloatField(blank=True, null=True)),
                ('complication', models.CharField(blank=True, choices=[('Y', 'Yes'), ('N', 'No')], default='', max_length=2)),
                ('complication_type', models.CharField(max_length=250)),
                ('therapy', models.CharField(max_length=250)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kokoro.patientprofile')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RMN_TC_PH',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_of_exam', models.DateField()),
                ('max_pressure', models.FloatField(blank=True, null=True)),
                ('min_pressure', models.FloatField(blank=True, null=True)),
                ('anatomical_alterations', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='', max_length=3)),
                ('lge', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='', max_length=3)),
                ('type_of_lge', models.CharField(choices=[('Meso', 'Meso'), ('Sub-Epi', 'Sub-Epi'), ('Sub-Endo', 'Sub-Endo')], default='', max_length=9)),
                ('location_of_lge', models.CharField(choices=[('Right', 'Right'), ('Left', 'Left'), ('Both', 'Both')], default='', max_length=5)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kokoro.patientprofile')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('imtc_id', models.CharField(max_length=20)),
                ('procedure_type', models.CharField(blank=True, choices=[('A', 'Ablation'), ('PA', 'Post-ablation follow-up'), ('DG', 'Diagnosis')], default='', max_length=2)),
                ('informed_consent', models.CharField(max_length=20)),
                ('collection_date', models.DateField()),
                ('pbmc_vials_n', models.PositiveIntegerField(blank=True, null=True)),
                ('pellet_vials_n', models.PositiveIntegerField(blank=True, null=True)),
                ('rna_vials_n', models.PositiveIntegerField(blank=True, null=True)),
                ('plasma_cold_vials_n', models.PositiveIntegerField(blank=True, null=True)),
                ('plasma_ambient_vials_n', models.PositiveIntegerField(blank=True, null=True)),
                ('rin', models.PositiveIntegerField(blank=True, null=True)),
                ('notes', models.CharField(blank=True, max_length=250)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='samples', to='kokoro.patientprofile')),
            ],
        ),
        migrations.CreateModel(
            name='ResearchAnalysis',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('analysis_name', models.CharField(blank=True, help_text='Analysis name', max_length=250)),
                ('type', models.CharField(choices=[('WGS', 'Whole Genome Sequencing'), ('WES', 'Whole Exome Sequencing'), ('RNAseq', 'RNA sequencing'), ('PRO', 'Proteomics (Mass Spectrometry)')], help_text='Type of omics analysis performed', max_length=10)),
                ('date_performed', models.DateField(auto_now_add=True)),
                ('result_files', models.JSONField(blank=True, help_text='Paths or identifiers for result files', null=True)),
                ('samples', models.ManyToManyField(help_text='Samples used in this analysis', related_name='analyses', to='kokoro.sample')),
            ],
            options={
                'verbose_name': 'Analysis',
                'verbose_name_plural': 'Analyses',
            },
        ),
        migrations.AddField(
            model_name='patientprofile',
            name='studies',
            field=models.ManyToManyField(blank=True, help_text='Which studies this patient is enrolled in', related_name='participants', to='kokoro.study'),
        ),
        migrations.CreateModel(
            name='Clinical_evaluation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_of_visit', models.DateField()),
                ('Primary_Cause_of_CD', models.CharField(choices=[('Ischemic', 'Ischemic'), ('Non Ischemic', 'Non Ischemic')], default='', max_length=13)),
                ('specify_ischemic', models.CharField(choices=[('CAD with Myocardial Infarction', 'CAD with Myocardial Infarction'), ('CAD without Myocardial Infarction', 'CAD without Myocardial Infarction')], default='', max_length=100)),
                ('mi_zone', models.CharField(choices=[('Anterior', 'Anterior'), ('Anterolateral', 'Anterolateral'), ('Apical', 'Apical'), ('Right wall', 'Right wall'), ('Inferior', 'Inferior'), ('Infero-postero lateral', 'Infero-postero lateral')], default='', max_length=100)),
                ('specify_non_ischemic', models.CharField(choices=[('dilates', 'dilates'), ('hypokinetic', 'hypokinetic'), ('hypertrophic', 'hypertrophic'), ('hypertensive', 'hypertensive')], default='', max_length=100)),
                ('nyha', models.CharField(choices=[('I', 'I'), ('II', 'II'), ('III', 'III'), ('IV', 'IV')], default='', max_length=4)),
                ('cardiomiopathies', models.ManyToManyField(blank=True, help_text='Cardiomiopathies this patient have.', related_name='clinical_evaluation', to='kokoro.cardiomiopathies')),
                ('comorbidities', models.ManyToManyField(blank=True, help_text='Comorbidities this patient have.', related_name='clinical_evaluation', to='kokoro.comorbidities')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kokoro.patientprofile')),
                ('riskfactors', models.ManyToManyField(blank=True, help_text='Risk Factors of this patient.', related_name='clinical_evaluation', to='kokoro.riskfactors')),
                ('symptoms', models.ManyToManyField(blank=True, help_text='Symptoms this patient have.', related_name='clinical_evaluation', to='kokoro.symptoms')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='patientprofile',
            name='allergies',
            field=models.ManyToManyField(blank=True, help_text="Patient's allergies", related_name='patient_allergies', to='kokoro.therapy'),
        ),
        migrations.AddField(
            model_name='patientprofile',
            name='therapies',
            field=models.ManyToManyField(blank=True, help_text='Therapies this patient is on.', related_name='patients_therapies', to='kokoro.therapy'),
        ),
        migrations.CreateModel(
            name='ValveIntervention',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date', models.DateField()),
                ('replacement', models.CharField(blank=True, choices=[('Y', 'Yes'), ('N', 'No')], default='', max_length=1)),
                ('repair', models.CharField(blank=True, choices=[('Y', 'Yes'), ('N', 'No')], default='', max_length=1)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kokoro.patientprofile')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PatientStudy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enrollment_date', models.DateField()),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='patient_studies', to='kokoro.patientprofile')),
                ('study', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='study_participants', to='kokoro.study')),
            ],
            options={
                'ordering': ['-enrollment_date'],
                'unique_together': {('patient', 'study')},
            },
        ),
    ]
